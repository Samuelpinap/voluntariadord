name: Live Swagger preview (PR)

on: pull_request

permissions:
  contents: read
  issues: write           # so the comment can be posted

jobs:
  preview:
    runs-on: ubuntu-latest
    timeout-minutes: 45
     
    env:
      PORT: 5000   
      JwtSettings__SecretKey: dummy-ci-key-change-me
      JwtSettings__Issuer: test-issuer
      JwtSettings__Audience: test-audience
      JwtSettings__ExpirationMinutes: 60

    steps:
    # â”€â”€ checkout & build â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - uses: actions/checkout@v4
    - uses: actions/setup-dotnet@v4
      with: { dotnet-version: '8.0.x' }

    - run: dotnet restore
    - run: dotnet publish -c Release -o out

    # â”€â”€ launch the API in the background â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Launch API
      run: |
        dotnet ./out/VoluntariadoConectadoRD.dll --urls http://0.0.0.0:${PORT} &  echo $! >api.pid

    - name: Tail startup log while waiting
      run: |
        for i in {1..30}; do
          if grep -q "Now listening on" api.log; then exit 0; fi
          if ! kill -0 $(cat api.pid) 2>/dev/null; then
            echo "::group::API crash log"; cat api.log; echo "::endgroup::"
            echo "::error::API process exited"; exit 1
          fi
          sleep 2
        done
        echo "::group::API startup log"; cat api.log; echo "::endgroup::"
        echo "::error::API failed to become healthy"; exit 1
    
    # â”€â”€ wait until itâ€™s really up (curl Swagger JSON) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Wait until API responds
      run: |
        for i in {1..30}; do
          curl -sf http://localhost:${PORT}/swagger/v1/swagger.json && exit 0
          sleep 2
        done
        echo "::error::API failed to start"; exit 1

    # â”€â”€ now install cloudflared and open the tunnel â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - uses: AnimMouse/setup-cloudflared@v2

    - name: Start tunnel & capture URL
      id: tunnel
      run: |
        cloudflared tunnel --url http://localhost:${PORT} --no-autoupdate 2>&1 | tee tunnel.log &
        for i in {1..30}; do
          URL=$(grep -o 'https://[-a-z0-9]*\.trycloudflare\.com' tunnel.log | head -n1 || true)
          [ -n "$URL" ] && { echo "url=$URL" >> $GITHUB_OUTPUT; break; }
          sleep 2
        done
        [ -n "$URL" ] || (echo "::error::Tunnel URL not captured"; exit 1)


    # â”€â”€ comment the liveâ€‘link on the PR â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.number }}
        body: |
          ðŸš€ **SWAGGER EN VIVO DE ESTE PR**  
          ${{ steps.tunnel.outputs.url }}/swagger

    # â”€â”€ keep it up for reviewers, then clean up â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Keep tunnel open
      run: sleep 1800          # 30â€¯min, adjust as needed

    - if: always()
      run: kill $(cat api.pid) || true
