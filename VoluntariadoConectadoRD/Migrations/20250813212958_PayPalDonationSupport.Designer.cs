// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VoluntariadoConectadoRD.Data;

#nullable disable

namespace VoluntariadoConectadoRD.Migrations
{
    [DbContext(typeof(DbContextApplication))]
    [Migration("20250813212958_PayPalDonationSupport")]
    partial class PayPalDonationSupport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Categoria")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EsAutomatico")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("RequisitoValor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Requisitos")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("badges", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastMessageAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LastMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("User1HasUnread")
                        .HasColumnType("INTEGER");

                    b.Property<int>("User1Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("User1LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<bool>("User2HasUnread")
                        .HasColumnType("INTEGER");

                    b.Property<int>("User2Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("User2LastSeen")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsArchived");

                    b.HasIndex("LastMessageAt");

                    b.HasIndex("LastMessageId");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.HasIndex("User1Id", "User1HasUnread");

                    b.HasIndex("User2Id", "User2HasUnread");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Donante")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EsRecurrente")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstadoPago")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FinancialReportId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetodoPago")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Monto")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PayPalOrderId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PayPalPayerEmail")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("PayPalPayerId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PayPalPaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PayPalTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Proposito")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FinancialReportId");

                    b.HasIndex("OrganizacionId");

                    b.HasIndex("PayPalOrderId");

                    b.HasIndex("PayPalTransactionId");

                    b.ToTable("donations", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<int>("FinancialReportId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Justificacion")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Monto")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FinancialReportId");

                    b.ToTable("expenses", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.FinancialReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Año")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DocumentoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EsPublico")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Resumen")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalGastos")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalIngresos")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Trimestre")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizacionId");

                    b.ToTable("financial_reports", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttachmentFileName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("AttachmentMimeType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long?>("AttachmentSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttachmentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("RecipientId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReplyToMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("IsRead");

                    b.HasIndex("RecipientId");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SentAt");

                    b.HasIndex("RecipientId", "IsRead", "IsDeleted");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("RecipientId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsRead");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.HasIndex("Type");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Organizacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AreasInteres")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int>("Estatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaFundacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaVerificacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Mision")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroRegistro")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("PerfilCompleto")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SaldoActual")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SitioWeb")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoOrganizacion")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Verificada")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Vision")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("organizaciones", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.PayPalTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DonationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PayPalOrderId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PayPalTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PayerEmail")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("PayerId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PayerName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RawPayPalResponse")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebhookData")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DonationId");

                    b.HasIndex("OrganizacionId");

                    b.HasIndex("PayPalOrderId")
                        .IsUnique();

                    b.HasIndex("PayPalTransactionId");

                    b.HasIndex("Status");

                    b.ToTable("paypal_transactions", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.PlatformStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FondosRecaudados")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("HorasTotalesDonadas")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NotasEstadisticas")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizacionesActivas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonasBeneficiadas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProyectosActivos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VoluntariosActivos")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("platform_stats", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Roles", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("descripcion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("estatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("fechaCreacion")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Categoria")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.UserOnlineStatus", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConnectionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("IsOnline");

                    b.HasIndex("LastSeen");

                    b.ToTable("UserOnlineStatuses");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Biografia")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CalificacionPromedio")
                        .HasPrecision(3, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Disponibilidad")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Estatus")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExperienciaAnios")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Habilidades")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("HorasVoluntariado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagenUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("PerfilCompleto")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Rol")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalResenas")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ubicacion")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.UsuarioBadge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BadgeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaObtenido")
                        .HasColumnType("TEXT");

                    b.Property<string>("NotasObtencion")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RazonOtorgamiento")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UsuarioId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("UsuarioId1");

                    b.HasIndex("UsuarioId", "BadgeId")
                        .IsUnique();

                    b.ToTable("usuario_badges", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.UsuarioResena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Calificacion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comentario")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioAutorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioResenadoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizacionId");

                    b.HasIndex("UsuarioAutorId");

                    b.HasIndex("UsuarioResenadoId");

                    b.ToTable("usuario_resenas", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.UsuarioSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Certificacion")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaAdquisicion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nivel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UsuarioId", "SkillId")
                        .IsUnique();

                    b.ToTable("usuario_skills", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.VolunteerActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CalificacionOrganizacion")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CalificacionVoluntario")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComentarioOrganizacion")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ComentarioVoluntario")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaCompletada")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<int>("HorasCompletadas")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notas")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("volunteer_activities", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.VolunteerApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Estatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaRespuesta")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mensaje")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("NotasOrganizacion")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VolunteerOpportunityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("VolunteerOpportunityId");

                    b.HasIndex("UsuarioId", "OpportunityId")
                        .IsUnique();

                    b.ToTable("volunteer_applications", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.VolunteerOpportunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AreaInteres")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Beneficios")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("DuracionHoras")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Estatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<string>("NivelExperiencia")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Requisitos")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Ubicacion")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("VoluntariosInscritos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VoluntariosRequeridos")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizacionId");

                    b.ToTable("volunteer_opportunities", (string)null);
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Conversation", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.Message", "LastMessage")
                        .WithMany()
                        .HasForeignKey("LastMessageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastMessage");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Donation", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.FinancialReport", "FinancialReport")
                        .WithMany("Donaciones")
                        .HasForeignKey("FinancialReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VoluntariadoConectadoRD.Models.Organizacion", "Organizacion")
                        .WithMany("Donations")
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FinancialReport");

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Expense", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.FinancialReport", "FinancialReport")
                        .WithMany("Gastos")
                        .HasForeignKey("FinancialReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialReport");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.FinancialReport", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.Organizacion", "Organizacion")
                        .WithMany()
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Message", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.Conversation", null)
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VoluntariadoConectadoRD.Models.Message", "ReplyToMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToMessageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("ReplyToMessage");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Notification", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Organizacion", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", "Usuario")
                        .WithOne("Organizacion")
                        .HasForeignKey("VoluntariadoConectadoRD.Models.Organizacion", "UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.PayPalTransaction", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.Donation", "Donation")
                        .WithMany()
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("VoluntariadoConectadoRD.Models.Organizacion", "Organizacion")
                        .WithMany()
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Donation");

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.UserOnlineStatus", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", "User")
                        .WithOne()
                        .HasForeignKey("VoluntariadoConectadoRD.Models.UserOnlineStatus", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.UsuarioBadge", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.Badge", "Badge")
                        .WithMany("UsuarioBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", "Usuario")
                        .WithMany("Badges")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", null)
                        .WithMany("UsuarioBadges")
                        .HasForeignKey("UsuarioId1");

                    b.Navigation("Badge");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.UsuarioResena", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.Organizacion", "Organizacion")
                        .WithMany()
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", "UsuarioAutor")
                        .WithMany()
                        .HasForeignKey("UsuarioAutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", "UsuarioResenado")
                        .WithMany("ResenasRecibidas")
                        .HasForeignKey("UsuarioResenadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizacion");

                    b.Navigation("UsuarioAutor");

                    b.Navigation("UsuarioResenado");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.UsuarioSkill", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.Skill", "Skill")
                        .WithMany("UsuarioSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.VolunteerActivity", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.VolunteerOpportunity", "Opportunity")
                        .WithMany()
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Opportunity");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.VolunteerApplication", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.VolunteerOpportunity", "Opportunity")
                        .WithMany("Aplicaciones")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoluntariadoConectadoRD.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VoluntariadoConectadoRD.Models.VolunteerOpportunity", null)
                        .WithMany("VolunteerApplications")
                        .HasForeignKey("VolunteerOpportunityId");

                    b.Navigation("Opportunity");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.VolunteerOpportunity", b =>
                {
                    b.HasOne("VoluntariadoConectadoRD.Models.Organizacion", "Organizacion")
                        .WithMany("Opportunities")
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Badge", b =>
                {
                    b.Navigation("UsuarioBadges");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.FinancialReport", b =>
                {
                    b.Navigation("Donaciones");

                    b.Navigation("Gastos");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Message", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Organizacion", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("Opportunities");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Skill", b =>
                {
                    b.Navigation("UsuarioSkills");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.Usuario", b =>
                {
                    b.Navigation("Badges");

                    b.Navigation("Organizacion");

                    b.Navigation("ResenasRecibidas");

                    b.Navigation("UsuarioBadges");
                });

            modelBuilder.Entity("VoluntariadoConectadoRD.Models.VolunteerOpportunity", b =>
                {
                    b.Navigation("Aplicaciones");

                    b.Navigation("VolunteerApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
